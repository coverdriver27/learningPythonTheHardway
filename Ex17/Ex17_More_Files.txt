Exercise 17: More Files

Now let's do a few more things with files. We'll write a Python script to copy one file to another. It'll be very short
but will give you ideas about other things you can do with files.


-----------------------------------------------------------------------------------------------------------------------
from sys import argv
from os.path import exists

script, from_file, to_file = argv

print(f"Copying from {from_file} to {to_file}")

# we could do these two on one line, how?
in_file = open(from_file)
indata = in_file.read()

print(f"The input file is {len(indata)} bytes long")

print(f"Does the output file exist? {exists(to_file)}")
print("Ready, hit RETURN to continue, CTRL-C to abort.")
input()

out_file = open(to_file, 'w')
out_file.write(indata)

print("Alright, all done.")

out_file.close()
in_file.close()
-----------------------------------------------------------------------------------------------------------------------

You should immediately notice that we import another handy command named exists. This returns True if a file exists,
based on its name in a string as an argument. It returns False if not. We'll be using this function in the second half
of this book to do lots of things, but right now you should see how you can import it.

Using import is a way to get tons of free code other better (well, usually) programmers have written so you do not have
to write it.

What You Should See

Just like your other scripts, run this one with two arguments: the file to copy from and the file to copy it to. I'm
going to use a simple test file named test.txt:

-----------------------------------------------------------------------------------------------------------------------
$ # first make a sample file
$ echo "This is a test file." > test.txt
$ # then look at it
$ cat test.txt
This is a test file.
$ # now run our script on it
$ python3.6 ex17.py test.txt new_file.txt
Copying from test.txt to new_file.txt
The input file is 21 bytes long
Does the output file exist? False
Ready, hit RETURN to continue, CTRL-C to abort.

Alright, all done.
-----------------------------------------------------------------------------------------------------------------------

It should work with any file. Try a bunch more and see what happens. Just be careful you do not blast an important file.

Warning

Did you see the trick I did with echo to make a file and cat to show the file? You can learn how to do that in
Appendix A, "Command Line Crash Course."


Study Drills

This script is really annoying. There's no need to ask you before doing the copy, and it prints too much out to the
screen. Try to make the script more friendly to use by removing features.


See how short you can make the script. I could make this one line long.
>> using with open, i was able to write the code in one line

Notice at the end of the What You Should See I used something called cat? It's an old command that "con*cat*enates"
files together, but mostly it's just an easy way to print a file to the screen. Type man cat to read about it.


Find out why you had to write out_file.close() in the code.
>> As best practise, after you have opened a file via the python code, it is best to always close it out at the end of
the script


Go read up on Python's import statement, and start python3.6 to try it out. Try importing some things and see if you can
get it right. It's alright if you do not.
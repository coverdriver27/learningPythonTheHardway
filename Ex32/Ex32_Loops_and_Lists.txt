### Exercise 32: Loops and Lists

You should now be able to do some programs that are much more interesting. If you have been keeping up, you should
realize that now you can combine all the other things you have learned with if-statements and boolean expressions to
make your programs do smart things.

However, programs also need to do repetitive things very quickly. We are going to use a for-loop in this exercise to
build and print various lists. When you do the exercise, you will start to figure out what they are. I won't tell you
right now. You have to figure it out.

Before you can use a for-loop, you need a way to store the results of loops somewhere. The best way to do this is with
lists. Lists are exactly what their name says: a container of things that are organized in order from first to last.
It's not complicated; you just have to learn a new syntax. First, there's how you make lists:

    hairs = ['brown', 'blond', 'red']
    eyes = ['brown', 'blue', 'green']
    weights = [1, 2, 3, 4]

You start the list with the [ (left bracket) which "opens" the list. Then you put each item you want in the list
separated by commas, similar to function arguments. Lastly, end the list with a ] (right bracket) to indicate that it's
over. Python then takes this list and all its contents and assigns them to the variable.

#### Warning

This is where things get tricky for people who can't code. Your brain has been taught that the world is flat. Remember
in the last exercise where you put if-statements inside if-statements? That probably made your brain hurt because most
people do not ponder how to "nest" things inside things. In programming nested structures are all over the place. You
will find functions that call other functions that have if-statements that have lists with lists inside lists. If you
see a structure like this that you can't figure out, take out a pencil and paper and break it down manually bit by bit
until you understand it.

We now will build some lists using some for-loops and print them out:

#### Code ---->

------------------------------------------------------------------------------------------------------------------------

the_count = [1, 2, 3, 4, 5]
fruits = ['apples', 'oranges', 'pears', 'apricots']
change = [1, 'pennies', 2, 'dimes', 3, 'quarters']

# this first kind of for-loop goes through a list
for number in the_count:
    print(f"This is count {number}")

# same as above
for fruit in fruits:
    print(f"A fruit of type: {fruit}")

# also we can go through mixed lists too
# notice we have to use {} since we don't know what's in it
for i in change:
    print(f"I got {i}")

# we can also build lists, first start with an empty one
elements = []

# then use the range function to do 0 to 5 counts
for i in range(0, 6):
    print(f"Adding {i} to the list.")
    # append is a function that lists understand
    elements.append(i)

# now we can print them out too
for i in elements:
    print(f"Element was: {i}")

------------------------------------------------------------------------------------------------------------------------


#### What You Should See ---->

------------------------------------------------------------------------------------------------------------------------

$ python3.6 ex32.py
This is count 1
This is count 2
This is count 3
This is count 4
This is count 5
A fruit of type: apples
A fruit of type: oranges
A fruit of type: pears
A fruit of type: apricots
I got 1
I got pennies
I got 2
I got dimes
I got 3
I got quarters
Adding 0 to the list.
Adding 1 to the list.
Adding 2 to the list.
Adding 3 to the list.
Adding 4 to the list.
Adding 5 to the list.
Element was: 0
Element was: 1
Element was: 2
Element was: 3
Element was: 4
Element was: 5

------------------------------------------------------------------------------------------------------------------------


#### Study Drills

Take a look at how you used range. Look up the range function to understand it.
    Done, and added comments regarding range function in the exercise

    The Python range() function returns a sequence of numbers, in a given range. The most common use of it is to iterate
    sequence on a sequence of numbers using Python loops.

    Syntax of Python range() function
    Syntax: range(start, stop, step)

    Parameter:

    start: [ optional ] start value of the sequence
    stop: next value after the end value of the sequence
    step: [ optional ] integer value, denoting the difference between any two numbers in the sequence.
    Return: Returns a range type object.

    Reference : https://www.geeksforgeeks.org/python-range-function/

Could you have avoided that for-loop entirely on line 22 and just assigned range(0,6) directly to elements?
    Tried to directly add it to the empty list and was getting a constant loop that kept running, we can make the
    variable to elements = range(0, 7). but this would make the variable a range than a list

    Tried this using a for loop with a defined range instead of creating a variable with a empty list.

    Another way is to --> elements3 = list(range(0, 7))


Find the Python documentation on lists and read about them. What other operations can you do to lists besides append?

    More on Lists

    The list data type has some more methods. Here are all of the methods of list objects:

    list.append(x)
    Add an item to the end of the list. Equivalent to a[len(a):] = [x].

    list.extend(iterable)
    Extend the list by appending all the items from the iterable. Equivalent to a[len(a):] = iterable.

    list.insert(i, x)
    Insert an item at a given position. The first argument is the index of the element before which to insert, so
    a.insert(0, x) inserts at the front of the list, and a.insert(len(a), x) is equivalent to a.append(x).

    list.remove(x)
    Remove the first item from the list whose value is equal to x. It raises a ValueError if there is no such item.

    list.pop([i])
    Remove the item at the given position in the list, and return it. If no index is specified, a.pop() removes and
    returns the last item in the list. (The square brackets around the i in the method signature denote that the
    parameter is optional, not that you should type square brackets at that position. You will see this notation
    frequently in the Python Library Reference.)

    list.clear()
    Remove all items from the list. Equivalent to del a[:].

    list.index(x[, start[, end]])
    Return zero-based index in the list of the first item whose value is equal to x. Raises a ValueError if there is
    no such item.

    The optional arguments start and end are interpreted as in the slice notation and are used to limit the search to a
    particular subsequence of the list. The returned index is computed relative to the beginning of the full sequence
    rather than the start argument.

    list.count(x)
    Return the number of times x appears in the list.

    list.sort(*, key=None, reverse=False)
    Sort the items of the list in place (the arguments can be used for sort customization, see sorted() for their
    explanation).

    list.reverse()
    Reverse the elements of the list in place.

    list.copy()
    Return a shallow copy of the list. Equivalent to a[:].


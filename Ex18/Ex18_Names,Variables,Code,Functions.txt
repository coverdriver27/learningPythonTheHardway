Exercise 18: Names, Variables, Code, Functions

Big title, right? I am about to introduce you to the function! Dum dum dah! Every programmer will go on and on about
functions and all the different ideas about how they work and what they do, but I will give you the simplest explanation
you can use right now.

Functions do three things:

1. They name pieces of code the way variables name strings and numbers.

2. They take arguments the way your scripts take argv.

3. Using 1 and 2, they let you make your own "mini-scripts" or "tiny commands."


You can create a function by using the word def in Python. I'm going to have you make four different functions that work
like your scripts, and I'll then show you how each one is related.

Code -->
-----------------------------------------------------------------------------------------------------------------------
# this one is like your scripts with argv
def print_two(*args):
    arg1, arg2 = args
    print(f"arg1: {arg1}, arg2: {arg2}")

# ok, that *args is actually pointless, we can just do this
def print_two_again(arg1, arg2):
    print(f"arg1: {arg1}, arg2: {arg2}")

# this just takes one argument
def print_one(arg1):
    print(f"arg1: {arg1}")

# this one takes no arguments
def print_none():
    print("I got nothin'.")


print_two("Zed","Shaw")
print_two_again("Zed","Shaw")
print_one("First!")
print_none()
-----------------------------------------------------------------------------------------------------------------------


Let's break down the first function, print_two, which is the most similar to what you already know from making scripts:

1. First we tell Python we want to make a function using def for "define".

2. On the same line as def we give the function a name. In this case we just called it "print_two," but it could also
be "peanuts." It doesn't matter, except that your function should have a short name that says what it does.

3. Then we tell it we want *args (asterisk args), which is a lot like your argv parameter but for functions. This has
to go inside () parentheses to work.

4. Then we end this line with a : (colon) and start indenting.
5. After the colon all the lines that are indented four spaces will become attached to this name, print_two. Our first
indented line is one that unpacks the arguments, the same as with your scripts.

6. To demonstrate how it works we print these arguments out, just like we would in a script.


The problem with print_two is that it's not the easiest way to make a function. In Python we can skip the whole
unpacking arguments and just use the names we want right inside (). That's what print_two_again does.

After that you have an example of how you make a function that takes one argument in print_one.

Finally you have a function that has no arguments in print_none.


Warning
-----------------------------------------------------------------------------------------------------------------------
This is very important. Do not get discouraged right now if this doesn't quite make sense. We're going to do a few
exercises linking functions to your scripts and show you how to make more. For now, just keep thinking "mini-script"
when I say "function" and keep playing with them.


What You Should See --->

If you run ex18.py you should see:

-----------------------------------------------------------------------------------------------------------------------
$ python3.6 ex18.py
arg1: Zed, arg2: Shaw
arg1: Zed, arg2: Shaw
arg1: First!
I got nothin'.
-----------------------------------------------------------------------------------------------------------------------


Right away you can see how a function works. Notice that you used your functions the way you use things like exists,
open, and other "commands." In fact, I've been tricking you because in Python those "commands" are just functions.
This means you can make your own commands and use them in your scripts too.


Study Drills

Create a function checklist for later exercises. Write these checks on an index card and keep it by you while you
complete the rest of these exercises or until you feel you do not need the index card anymore:

Did you start your function definition with def?
>> Yes

Does your function name have only characters and _ (underscore) characters?
>> Yes

Did you put an open parenthesis ( right after the function name?
>> Yes

Did you put your arguments after the parenthesis ( separated by commas?
>> Yes

Did you make each argument unique (meaning no duplicated names)?
>> Yes

Did you put a close parenthesis and a colon ): after the arguments?
>> Yes

Did you indent all lines of code you want in the function four spaces? No more, no less.
>> Yes

Did you "end" your function by going back to writing with no indent (dedenting we call it)?
>> Yes


When you run ("use" or "call") a function, check these things:


Did you call/use/run this function by typing its name?
>> Yes

Did you put the ( character after the name to run it?
>> Yes

Did you put the values you want into the parenthesis separated by commas?
>> Yes

Did you end the function call with a ) character?
>> Yes

Use these two checklists on the remaining lessons until you do not need them anymore.
>> Yes

Finally, repeat this a few times to yourself:
>> Yes

"To 'run,' 'call,' or 'use' a function all mean the same thing."
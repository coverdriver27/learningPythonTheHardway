Exercise 13: Parameters, Unpacking, Variables

In this exercise we will cover one more input method you can use to pass variables to a script
(script being another name for your .py files). You know how you type python3.6 ex13.py to run the ex13.py file?
Well the ex13.py part of the command is called an "argument." What we'll do now is write a script
that also accepts arguments.

Type this program and I'll explain it in detail:

Code -------->
----------------------------------------------------------------------------------------------------------------------
from sys import argv
# read the WYSS section for how to run this
script, first, second, third = argv

print("The script is called:", script)
print("Your first variable is:", first)
print("Your second variable is:", second)
print("Your third variable is:", third)

----------------------------------------------------------------------------------------------------------------------

On line 1 (line 12 above) we have what's called an "import." This is how you add features to your script from the Python
feature set. Rather than give you all the features at once, Python asks you to say what you plan to use.
This keeps your programs small, but it also acts as documentation for other programmers who read your code later.

The argv is the "argument variable," a very standard name in programming that you will find used in many other
languages. This variable holds the arguments you pass to your Python script when you run it. In the exercises you will
get to play with this more and see what happens.

Line 3 (Line 14 above) "unpacks" argv so that, rather than holding all the arguments, it gets assigned to four variables
you can work with: script, first, second, and third. This may look strange, but "unpack" is probably the best word to
describe what it does. It just says, "Take whatever is in argv, unpack it, and assign it to all of these variables on
the left in order."

After that we just print them out like normal.


Hold Up! Features Have Another Name

I call them "features" here (these little things you import to make your Python program do more) but nobody else calls
them features. I just used that name because I needed to trick you into learning what they are without jargon.
Before you can continue, you need to learn their real name: modules.

From now on we will be calling these "features" that we import modules. I'll say things like,
"You want to import the sys module." They are also called "libraries" by other programmers,
but let's just stick with modules.


Warning

Pay attention! You have been running python scripts without command line arguments. If you type only python3.6 ex13.py
you are doing it wrong! Pay close attention to how I run it. This applies any time you see argv being used.

Run the program like this (and you must pass three command line arguments):

What You Should See -------------->

----------------------------------------------------------------------------------------------------------------------

$ python3.6 ex13.py first 2nd 3rd
The script is called: ex13.py
Your first variable is: first
Your second variable is: 2nd
Your third variable is: 3rd

----------------------------------------------------------------------------------------------------------------------

This is what you should see when you do a few different runs with different arguments:

----------------------------------------------------------------------------------------------------------------------
$ python3.6 ex13.py stuff things that
The script is called: ex13.py
Your first variable is: stuff
Your second variable is: things
Your third variable is: that
$
$ python3.6 ex13.py apple orange grapefruit
The script is called: ex13.py
Your first variable is: apple
Your second variable is: orange
Your third variable is: grapefruit
-----------------------------------------------------------------------------------------------------------------------

You can actually replace first, 2nd, and 3rd with any three things you want.


If you do not run it correctly, then you will get an error like this:

-----------------------------------------------------------------------------------------------------------------------
$ python3.6 ex13.py first 2nd
Traceback (most recent call last):
  File "ex13.py", line 3, in <module>
    script, first, second, third = argv
ValueError: not enough values to unpack (expected 4, got 3)
-----------------------------------------------------------------------------------------------------------------------

This happens when you do not put enough arguments on the command when you run it (in this case just first 2nd).
Notice that when I run it I give it first 2nd, which caused it to give an error about
"need more than 3 values to unpack" telling you that you didn't give it enough parameters.

-----------------------------------------------------------------------------------------------------------------------
Study Drills

1) Try giving fewer than three arguments to your script. See that error you get? See if you can explain it.
>> ValueError: not enough values to unpack (expected 4, got 1)

2) Write a script that has fewer arguments and one that has more. Make sure you give the unpacked variables good names.

3) Combine input with argv to make a script that gets more input from a user. Don't overthink it.
Just use argv to get something, and input to get something else from the user.

4) Remember that modules give you features. Modules. Modules. Remember this because we'll need it later.